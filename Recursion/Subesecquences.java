package Recursion;

/*

Description:
    This program finds all subsequences of a given string using recursion...
    A subsequence is a sequence that can be derived from another sequence by deleting some or no elements
    without changing the order of the remaining elements...

Problem Statement:
    -> Given a string s, find all possible subsequences of the string...
    -> For example, subsequences of "abc" are: "", "a", "b", "c", "ab", "ac", "bc", "abc"...
    -> The program implements two approaches to solve this problem...

Approach:
    > Two Recursive Methods:
        1. getSubsequences(): Returns an ArrayList containing all subsequences...
        2. printSubsequences(): Directly prints all subsequences without storing them...
        
        Both methods use the same fundamental recursive logic but differ in implementation:
            a. getSubsequences() builds a complete result set and returns it...
            b. printSubsequences() prints each subsequence as it's generated...

Algorithm Steps:
    -> getSubsequences() Method:
        1. Base case: If the string is empty, add an empty string to result and return...
        2. Extract the first character from the string...
        3. Recursively find all subsequences of the remaining string (substring from index 1)...
        4. For each subsequence in the recursive result:
           - Add the subsequence as is (case where current character is excluded)...
           - Add the current character + subsequence (case where current character is included)...
        5. Return the combined result...
        
    -> printSubsequences() Method:
        1. Base case: If the string is empty, print the current answer and return...
        2. Extract the first character and the remaining string...
        3. Make recursive calls representing two choices:
           - Include the current character in the subsequence...
           - Exclude the current character from the subsequence...
        4. Print results as they are generated (without storing them)...
        
    -> Main Method Flow:
        1. Take a string input from the user...
        2. Call getSubsequences() and print all subsequences from the returned ArrayList...
        3. Call printSubsequences() to print all subsequences directly using recursion...

Key Characteristics:
    -> Uses recursion to break down the problem into simpler subproblems...
    -> Demonstrates the concept of making binary choices (include/exclude) at each step...
    -> Implements both a return-based approach and a void printing approach...
    -> Handles the base case of an empty string appropriately...
    -> Time complexity is O(2^n) where n is the length of the string...
    -> Space complexity is O(2^n) for getSubsequences() due to storing all subsequences...

Implementation Details:
    -> The package is named "Recursion"...
    -> Uses ArrayList to store the subsequences...
    -> Takes input from the user through Scanner...
    -> Prints the results with commas as separators...
    -> Has properly defined methods with appropriate parameters and return types...

Time and Space Complexity:
    -> Time Complexity: O(2^n) where n is the length of the input string...
       (Each character has two choices: be included or not included)...
    -> Space Complexity: 
       - O(2^n) for getSubsequences() to store all subsequences...
       - O(n) for printSubsequences() recursion stack depth...

Potential Improvement:
    -> Could implement memoization if specific subsequences are queried repeatedly...
    -> Could be extended to handle filtering of subsequences based on custom criteria...
    -> Input validation could be added to handle edge cases or special characters...

*/

import java.util.ArrayList;
import java.util.Scanner;

public class Subesecquences {

    private static ArrayList<String> getSubsequences(String s) {
        ArrayList<String> ans = new ArrayList<>();
        
        if(s.isEmpty()){
            ans.add("");
            return ans;
        }
        
        char currChar = s.charAt(0);
        ArrayList<String> helper = getSubsequences(s.substring(1));
        
        for (String temp : helper) {
            ans.add(temp);
            ans.add(currChar + temp);
        }
       
        return ans;
    }
    private static void printSubsequences(String s,String currAns) {
        if(s.isEmpty()){
            System.out.print(currAns + ",");
            return;
        }
        
        char currChar = s.charAt(0);
        String remaining = s.substring(1);
        
        printSubsequences(remaining,currAns+currChar);
        printSubsequences(remaining,currAns);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
       
        System.out.println("Enter the string: ");
        String s = sc.nextLine();
        
        ArrayList<String> ans = new ArrayList<>(getSubsequences(s));
        
        for (String temp : ans) {
            System.out.print(temp + ",");
        }
        
        System.out.println();
        printSubsequences(s,"");
    }
}
