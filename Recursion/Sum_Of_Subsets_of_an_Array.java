package Recursion;

/*

Description:
    This program calculates and prints the sum of all possible subsets of an integer array using recursion...
    A subset is any combination of elements from the array, including the empty set and the complete array itself...

Problem Statement:
    -> Given an array of integers, find the sum of each possible subset of the array...
    -> For example, subsets of [1,2] are: [], [1], [2], [1,2] with sums: 0, 1, 2, 3 respectively...
    -> The program uses recursion to generate and calculate these sums...

Approach:
    > Recursive Subset Generation:
        1. For each element in the array, we have two choices:
           - Include the element in the current subset...
           - Exclude the element from the current subset...
        2. This binary choice pattern creates a recursive tree that explores all possible subsets...
        3. The sum is calculated progressively as elements are included...

Algorithm Steps:
    -> printSumOfSubsets() Method:
        1. Base case: If the current index (idx) equals the array length, we've processed all elements:
           - Print the current sum and return...
        2. Recursive case with two branches:
           a. Exclude the current element:
              - Make recursive call with index+1 and unchanged sum...
           b. Include the current element:
              - Make recursive call with index+1 and sum+current element...
        3. The recursion naturally builds all possible combinations of elements...
        
    -> Main Method Flow:
        1. Define a test array [1,2]...
        2. Get the length of the array...
        3. Call printSumOfSubsets() with initial parameters:
           - The array, its length, starting index 0, and initial sum 0...

Key Characteristics:
    -> Uses recursion to generate all 2^n possible subsets of an array with n elements...
    -> Each element has exactly two states: included or excluded...
    -> The sum is accumulated during the recursive traversal...
    -> Prints each subset sum as soon as a complete subset is formed...
    -> Does not store the actual subsets, only calculates and prints their sums...

Implementation Details:
    -> The package is named "Recursion"...
    -> Uses a private static method for the recursive algorithm...
    -> Takes fixed array input [1,2] in the main method...
    -> Prints the sums directly to console using System.out.println()...
    -> Uses function parameters to maintain the current state (index and running sum)...

Time and Space Complexity:
    -> Time Complexity: O(2^n) where n is the size of the array...
       (Each element has two choices, creating a binary tree of execution)...
    -> Space Complexity: O(n) for the recursion stack depth...
       (Maximum depth equals the array length)...

Potential Improvement:
    -> Could be modified to store and return the actual subsets along with their sums...
    -> Could accept user input for the array rather than using a hardcoded example...
    -> Could implement sorting or filtering of the sums based on specific criteria...
    -> Error handling could be added for large arrays to prevent stack overflow...

*/

public class Sum_Of_Subsets_of_an_Array {

    private static void printSumOfSubsets(int[] arr, int length, int idx, int sum) {
        if(idx == length){
            System.out.println(sum);
        }
    
        printSumOfSubsets(arr, length,idx+1, sum);
        printSumOfSubsets(arr, length, idx+1, sum+arr[idx]);
    }
    
    public static void main(String[] args) {
    
        int[] arr = {1,2};
        int n = arr.length;
        System.out.println("The Sum of subsets are : ");
        printSumOfSubsets(arr, n, 0, 0);
    }

}
