package Recursion;

/*

    Description:
        Following program demonstrates the implementation of "Removing a Specific Character from a String"
        using a recursive approach...

    Problem Statement:
        -> Given a string and a character...
        -> The task is to remove all occurrences of the specified character from the string...
        -> String manipulation must be performed without using built-in replace functions...
        -> The task demonstrates string processing through character-by-character examination and recursion...

    Approach:
        > Recursive Character Removal:
            i. Use recursion to process the string character by character...
            ii. Build a new string excluding the target character...
            iii. Follow a specific processing strategy:
                a. Process the string from left to right, one character at a time...
                b. For each character, decide whether to include it in the result or skip it...
                c. Combine results from recursive calls to build the final string...
            iv. The recursion terminates when the entire string has been processed...

    Algorithm Steps:
        -> Recursive Character Removal Implementation:
            1. Check base case: If the string is empty, return an empty string...
            2. Make a recursive call to process the substring starting from index 1...
            3. Examine the first character of the current string:
               - If it doesn't match the target character, prepend it to the result from the recursive call...
               - If it matches, exclude it by returning only the result from the recursive call...
        -> Main Method Flow:
            1. Prompt the user to enter a string...
            2. Prompt the user to enter a character to remove...
            3. Call the remove function with the input string and character...
            4. Print the resulting string after character removal...

    Key Characteristics:
        -> Processes the string from left to right through recursion...
        -> Builds the result during the recursive unwinding phase...
        -> Preserves the original order of characters...
        -> Demonstrates head recursion where processing occurs after the recursive call...

        > Implementation Details:
            -> Function accepts two parameters: the input string and the target character...
            -> Returns a new string rather than modifying the original...
            -> Uses substring() and charAt() for string manipulation...
            -> Takes input from user via Scanner...

    Time and Space Complexity:
        -> Time Complexity: O(n) where n is the length of the string...
        -> Space Complexity: O(n) for the recursion stack and the result string...

    Example:
        -> For input string "banana" and character 'a', the output would be "bnn"...
        -> For input string "hello world" and character 'l', the output would be "heo word"...

*/

import java.util.Scanner;

public class Remove_A_Specific_Char {

    private static String remove(String st, char c){
        if(st.isEmpty()) {
            return "";
        }
        String small = remove(st.substring(1), c);
        char ch = st.charAt(0);
        
        if(ch != c) {
            return ch + small;
        }
        return small;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a string: ");
        String st = sc.nextLine();
        
        System.out.println("Enter the Character to remove: ");
        char ch = sc.next().charAt(0);
        
        System.out.println("After removing the character the String is : " + remove(st,ch));
    }
    
}
