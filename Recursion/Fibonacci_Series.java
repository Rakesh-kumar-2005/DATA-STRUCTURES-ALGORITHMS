package Recursion;

/*

    Description:
        Following program demonstrates the implementation of the "Fibonacci Series" generation
        using a recursive approach...

    Problem Statement:
        -> The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones...
        -> Starting with 0 and 1, the sequence begins: 0, 1, 1, 2, 3, 5, 8, 13, 21, ...
        -> Given two initial values (a and b) and a count (x)...
        -> The task is to generate and print the next x numbers in the Fibonacci sequence...
        -> This fundamental sequence appears in many natural phenomena and has applications in mathematics, computer science, and nature...

    Approach:
        > Recursive Fibonacci Sequence Generation:
            i. Use recursive calls to generate successive Fibonacci numbers...
            ii. Pass the current two numbers and remaining count in each recursive call...
            iii. Follow a specific computation strategy:
                a. Calculate the next Fibonacci number as the sum of the two previous numbers...
                b. Print the calculated number...
                c. Recursively call the function with updated parameters...
                d. Decrement the count with each call until reaching zero...
            iv. The recursion terminates when the count reaches zero or invalid initial conditions are met...

    Algorithm Steps:
        -> Recursive Fibonacci Implementation:
            1. Check base cases:
               - If both a and b are 0, return (invalid initial condition)...
               - If count x equals 0, return (no more numbers to generate)...
            2. Calculate the next Fibonacci number c = a + b...
            3. Print the calculated number...
            4. Recursively call fibonacci(b, c, x-1) to generate the next number in sequence...
        -> Main Method Flow:
            1. Call fibonacci function with initial values (0,1) and count 5...
            2. Print the resulting 5 Fibonacci numbers...

    Key Characteristics:
        -> Generates Fibonacci numbers one by one through recursion...
        -> Prints the numbers as they are calculated rather than returning them...
        -> Uses tail recursion where the recursive call is the last operation...
        -> Handles boundary conditions for invalid inputs...

        > Implementation Details:
            -> Function accepts three parameters: two consecutive Fibonacci numbers and a count...
            -> Prints the generated numbers with spaces between them...
            -> Test case generates 5 Fibonacci numbers starting with 0 and 1...
            -> Each recursive call shifts the window of two numbers forward in the sequence...

    Time and Space Complexity:
        -> Time Complexity: O(x) - proportional to the count of numbers to generate...
        -> Space Complexity: O(x) for the recursion stack...

    Output Analysis:
        -> For input fibonacci(0,1,5), the program will print: "1 2 3 5 8 "
        -> Note that the first 0 and 1 are not printed; only the generated numbers are displayed...

*/

public class Fibonacci_Series {

    public static void fibonacci(int a,int b,int x){
        if(a == 0 && b == 0)return;
        if (x==0)return;
        int c = a + b;
        System.out.print(c + " ");
        fibonacci(b,c,x-1);
    
    }
    public static void main(String[] args) {
        System.out.println("The Fibonacci series is : ");
        fibonacci(0,1,5);
    }
}
