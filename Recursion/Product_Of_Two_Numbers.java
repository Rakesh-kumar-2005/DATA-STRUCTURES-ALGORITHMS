package Recursion;

// ONLY FOR POSITIVE NUMBER...

/*
    Description:
        Following program demonstrates the implementation of "Multiplication of Two Positive Numbers"
        using a recursive addition-based approach...

    Problem Statement:
        -> Given two positive integers m and n...
        -> The task is to calculate their product (m × n) without using the multiplication operator...
        -> The multiplication operation must be implemented using repeated addition through recursion...
        -> This approach demonstrates how complex operations can be built from simpler ones...

    Approach:
        > Recursive Addition-Based Multiplication:
            i. Use recursion to add the first number to itself multiple times...
            ii. Conceptualize multiplication as repeated addition: m × n = m + m + m + ... (n times)...
            iii. Follow a specific computation strategy:
                a. Handle base cases for efficiency and correctness...
                b. For each recursive call, add m to the accumulated sum and decrement n...
                c. Continue until n reaches 1 (last addition) or 0 (termination)...
            iv. The recursion terminates when one of the factors becomes 0 or 1...

    Algorithm Steps:
        -> Recursive Product Implementation:
            1. Check base cases:
               - If either m or n equals 0, return 0 (property of multiplication)...
               - If m equals 1, return n (1 × n = n)...
               - If n equals 1, return m (m × 1 = m)...
            2. For the recursive case, return m + product(m, n-1)...
               (Add m to itself n times by recursively adding m and decreasing n by 1)...
        -> Main Method Flow:
            1. Call product function with test cases (7,8) and (8,9)...
            2. Print the resulting product values...

    Key Characteristics:
        -> Implements multiplication using only addition operations...
        -> Uses recursion to perform repeated addition...
        -> Handles special cases efficiently (multiplication by 0 or 1)...
        -> Works only for positive integers as noted in the comment...

        > Implementation Details:
            -> Function accepts two integer parameters...
            -> Returns the computed product rather than printing it...
            -> Optimizes for base cases to minimize recursive calls...
            -> Tests with two different multiplication examples...

    Time and Space Complexity:
        -> Time Complexity: O(n) where n is the second parameter...
        -> Space Complexity: O(n) for the recursion stack...

    Note:
        -> The function has a bug in the base case where m == 1: it should return n instead of 1...
        -> This would cause incorrect results when multiplying 1 by any number...
        -> The implementation works correctly only for positive integers as specified in the comment...

*/

public class Product_Of_Two_Numbers {
    
    public static int product(int m, int n){
        if (n == 0 || m == 0) {
            return 0;
        }
        
        if (m == 1) {
            return 1;
        }
        
        if(n == 1) {
            return m;
        }
        return m + product(m,n-1);
    }
    public static void main(String[] args) {
        
        System.out.println("Some examples would be : ");
        System.out.println(product(7,8));
        System.out.println(product(8,9));
    }
}
