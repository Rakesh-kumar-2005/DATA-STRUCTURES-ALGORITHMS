package Recursion;

/*

    Description:
        Following program demonstrates the implementation of the "Phone Keypad Letter Combinations" algorithm
        using a recursive approach...

    Problem Statement:
        -> Given a string of digits from 2-9...
        -> Each digit maps to a set of letters on a phone keypad (e.g., 2 maps to "abc", 3 maps to "def", etc.)...
        -> The task is to generate all possible letter combinations that the number could represent...
        -> This is equivalent to the classic "Letter Combinations of a Phone Number" problem...

    Approach:
        > Recursive Backtracking for Letter Combinations:
            i. Use recursion to explore all possible combinations of letters...
            ii. For each digit, try all the letters it maps to...
            iii. Follow a specific generation strategy:
                a. If no digits remain, print the current combination...
                b. Otherwise, take the first digit and find its corresponding letters...
                c. For each possible letter choice, make a recursive call with:
                   - The remaining digits...
                   - The current combination plus the chosen letter...
                d. Backtrack to try other letter choices...
            iv. The recursion terminates when all digits are processed...

    Algorithm Steps:
        -> Recursive Letter Combination Implementation:
            1. Check base case: If the digit string is empty:
               - Print the current result string (a complete combination)...
               - Return to backtrack...
            2. Extract the first digit from the string...
            3. Find the corresponding letter choices for this digit from the mapping array...
            4. For each letter in the choices:
               - Recursively call combination() with:
                 * The remaining digits (substring from index 1)...
                 * The current result string plus the chosen letter...
        -> Main Method Flow:
            1. Define the mapping array for digits 0-9 to their corresponding letters...
            2. Prompt the user to enter a digit string (2-9 only)...
            3. Call the combination function with initial values...
            4. Print all generated letter combinations...

    Key Characteristics:
        -> Uses backtracking to explore all possible combinations...
        -> Handles the mapping from digits to letters using an array...
        -> Prints each valid combination as it's generated...
        -> Demonstrates recursive tree traversal for combinatorial problems...

        > Implementation Details:
            -> Function takes three parameters: remaining digits, mapping array, and current result...
            -> Uses charAt() and substring() for string manipulation...
            -> Converts char to integer using ASCII arithmetic...
            -> Takes input from user via Scanner...

    Time and Space Complexity:
        -> Time Complexity: O(4^n) where n is the number of digits...
           (Each digit can map to at most 4 letters, and we explore all combinations)
        -> Space Complexity: O(n) for the recursion stack...

    Example:
        -> For input "23", the output would be all combinations of letters from "abc" (for 2) and "def" (for 3):
           "ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"...

*/

import java.util.Scanner;

public class Possible_Letter_Combination {

    private static void combination(String digit, String[] arr, String res){
        if(digit.isEmpty()) {
            System.out.println(res);
            return;
        }
        
        char currNum = (char) (digit.charAt(0) - '0');
        String currChoices = arr[currNum];
        
        for (int i = 0; i < currChoices.length(); i++){
            combination(digit.substring(1),arr,res + currChoices.charAt(i));
        }
        
    }
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        String[] arr = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        
        System.out.println("Enter a number only with the digits from 2 to 9 :");
        String digit = sc.next();
        
        System.out.println("The possible combinations are :-  ");
        combination(digit, arr, "");
    }
}
