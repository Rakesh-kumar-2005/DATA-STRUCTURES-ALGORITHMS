package Arrays;

/*

    Description:
        Following program demonstrates the solution to the "Count Inversions" problem
        using a Brute Force Approach...

    Problem Statement:
        -> Given an array of integers...
        -> An inversion occurs when elements at positions i and j satisfy: i < j and arr[i] > arr[j]...
        -> The task is to count the total number of inversions in the array...
        -> Inversions indicate how far the array is from being sorted...
        -> A sorted array has zero inversions, while a reverse sorted array has maximum inversions...

    Approach:
        > Brute Force with Nested Loops:
            i. Compare each element with all elements that come after it...
            ii. Count pairs where the first element is greater than the second element...
            iii. Use two nested loops to examine all possible pairs...
            iv. Accumulate the count of inversions found...

    Algorithm Steps:
        -> Initialize a counter variable to zero...
        -> Use two nested loops to examine all pairs (arr[i], arr[j]) where i < j:
            1. Outer loop iterates from index 0 to n-2...
            2. Inner loop iterates from index i+1 to n-1...
            3. For each pair, check if arr[i] > arr[j]...
            4. If condition is true, increment the inversion counter...
        -> Return the final count of inversions...

    Key Characteristics:
        -> Simple implementation using nested loops...
        -> Directly applies the definition of an inversion...
        -> Works for any array of integers without modification...
        -> Guaranteed to find all inversions in the array...

        > Counting Mechanism:
            -> Compares each element with all subsequent elements...
            -> Ensures each inversion is counted exactly once...
            -> Provides an exact measure of array disorder...

    Time and Space Complexity:
        -> Time Complexity: O(NÂ²) where N is the length of the array...
        -> Space Complexity: O(1) as only a counter variable is used...

*/

public class Count_Inversion_Brute_Force {

    private static int countInversion(int[] arr) {

        int n = arr.length;
        int count = 0;

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arr[i] > arr[j]) {
                    count++;
                }
            }
        }
        return count;
    }


    public static void main(String[] args) {

        int[] arr = {8, 7, 6, 5, 4, 3, 2, 1};

        int count = countInversion(arr);
        System.out.println("Total number of inversions is = " + count);
    }

}