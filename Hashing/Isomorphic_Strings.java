package Hashing;

/*

    Description:
        Following program demonstrates the solution to the "Isomorphic Strings" problem
        using HashMap and HashSet data structures...

    Problem Statement:
        -> Given two strings s and t...
        -> Two strings are isomorphic if the characters in s can be replaced to get t...
        -> All occurrences of a character must be replaced with another character while preserving order...
        -> No two characters may map to the same character, but a character may map to itself...
        -> The strings must be of equal length for potential isomorphism...

    Approach:
        > Character Mapping with Hash-based Data Structures:
            i. Use HashMap to track character mappings from string s to string t...
            ii. Use HashSet to ensure one-to-one mapping (no two chars map to same char)...
            iii. Iterate through both strings simultaneously and verify mapping consistency...
            iv. Return false if any inconsistency is found...

    Algorithm Steps:
        -> Check if strings have equal length, return false if not...
        -> Initialize a HashMap for character mappings (s to t)...
        -> Initialize a HashSet to track used characters in string t...
        -> Iterate through each character position in both strings:
            1. Extract current characters from both strings...
            2. If current s-character already has a mapping:
               - Check if it maps to current t-character...
               - Return false if mapping is inconsistent...
            3. If current s-character has no mapping but t-character is already used:
               - Return false (violates one-to-one mapping)...
            4. Otherwise, create new mapping and mark t-character as used...
        -> Return true if all characters are processed without inconsistencies...

    Key Characteristics:
        -> Ensures one-to-one character mapping between strings...
        -> Preserves character order in the mapping process...
        -> Handles edge cases like unequal string lengths...
        -> Efficiently checks for mapping violations...

        > Verification Mechanism:
            -> Uses HashMap to verify consistent forward mapping...
            -> Uses HashSet to verify no duplicate target characters...
            -> Maintains mapping integrity throughout iteration...

    Time and Space Complexity:
        -> Time Complexity: O(N) where N is the length of the strings...
        -> Space Complexity: O(K) where K is the number of unique characters (at most 256)...

*/

import java.util.HashMap;
import java.util.HashSet;

public class Isomorphic_Strings {
    
    public static boolean isIsomorphic(String s, String t){
        if (s.length() != t.length()) return false;
        
        HashMap<Character,Character> mp = new HashMap<>();
        HashSet<Character> st = new HashSet<>();
        
        for (int i = 0; i < s.length(); i++){
            char sCh = s.charAt(i);
            char tCh = t.charAt(i);
        
            if (mp.containsKey(sCh)){
                if (mp.get(sCh) != tCh) return false;
            
            }else if (st.contains(tCh)) return false;
            
            else {
                mp.put(sCh,tCh);
                st.add(tCh);
            }
        }
        
        return true;
    }

    public static void main(String[] args) {
        
        System.out.println("Isomorphic checking - " + isIsomorphic("adda","eggx"));
        
    }
}
