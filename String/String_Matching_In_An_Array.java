package String;

/*

Description:
    Following program demonstrates the solution to the "String Matching in an Array" problem
    using nested loops and substring checking...

Problem Statement:
    -> Given an array of strings called words...
    -> Find all strings in words that are substrings of another string in the same array...
    -> Return these substring matches in any order...

Approach:
    > Nested Loop Comparison:
        i. Compare each string with every other string in the array...
        ii. Check if one string is contained within another string...
        iii. Collect all strings that appear as substrings of other strings...

    > Algorithm Steps:
        -> Initialization:
            1. Create an ArrayList to store the answer strings...
            2. Get the length of the input array for iteration...

        -> String comparison:
            1. Use nested loops to compare each string with every other string...
            2. For each pair of strings, check if one is contained within the other...
            3. Ensure we don't compare a string with itself using the index check (i != j)...
            4. When a match is found, add the substring to the result list...
            5. Use break to avoid adding duplicates of the same substring...

        -> Result collection:
            1. Return the ArrayList containing all strings that are substrings of others...

    > Key Characteristics:
        -> Handles all strings in the array regardless of their length or content...
        -> Each string is only added once to the result, even if it appears as a substring in multiple strings...
        -> Works with any valid array of strings including empty strings...
        -> No additional sorting or preprocessing is required...
        -> Returns results in the order they are discovered during iteration...

    > Implementation Details:
        -> Uses ArrayList for dynamic result collection...
        -> Leverages Java's built-in contains() method for substring checking...
        -> Uses break to optimize by avoiding unnecessary comparisons after a match is found...
        -> Demonstrates the solution with an example array containing ["mass", "as", "hero", "superhero"]...
        -> Output shows strings that are substrings of other strings in the array...

    > Time and Space Complexity:
        -> Time Complexity: O(nÂ² * m) where n is the number of strings and m is the average string length...
        -> Space Complexity: O(k) where k is the number of strings that are substrings of others...
        -> The contains() method itself has a time complexity of O(m) where m is the string length...
   
*/

import java.util.ArrayList;

public class String_Matching_In_An_Array {

    private static ArrayList<String> stringMatching(String[] words) {
        ArrayList<String> ans = new ArrayList<>();
        int n = words.length;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (words[j].contains(words[i]) && i != j) {
                    ans.add(words[i]);
                    break;
                }
            }
        }
        return ans;
    }

    public static void main(String[] args) {

        String[] words = {"mass", "as", "hero", "superhero"};

        System.out.println("The words which has a substring in the array are : ");
        System.out.println(stringMatching(words));

    }

}
