package String;

/*

Description:
    Following program demonstrates the solution to the "Count Prefix and Suffix Pairs" problem
    using nested loops and string comparison methods...

Problem Statement:
    -> Given an array of strings called words...
    -> A pair of strings (words[i], words[j]) forms a valid pair if i < j and words[i] is both
       a prefix and suffix of words[j]...
    -> The task is to count the number of such valid pairs...

Approach:
    > Nested Loop Comparison:
        i. Compare each string with every subsequent string in the array...
        ii. Check if the first string is both a prefix and suffix of the second string...
        iii. Count all pairs that satisfy this condition...

    > Algorithm Steps:
        -> Initialization:
            1. Initialize a counter variable to track valid pairs...
            2. Get the length of the input array for iteration bounds...

        -> String pair comparison:
            1. Use nested loops to compare each string with all subsequent strings...
            2. The outer loop runs from 0 to n-2 (i)...
            3. The inner loop runs from i+1 to n-1 (j), ensuring i < j...
            4. For each pair, check if words[i] is both a prefix and suffix of words[j]...
            5. If both conditions are met, increment the counter...

        -> Result calculation:
            1. Return the final count of valid prefix and suffix pairs...

    > Key Characteristics:
        -> Only considers ordered pairs where i < j (avoiding duplicates and self-comparison)...
        -> Uses Java's built-in startsWith() and endsWith() methods for efficient string checks...
        -> Works with any valid array of strings including empty strings...
        -> Handles edge cases like when a string is both a prefix and suffix of itself...
        -> Correctly processes strings of varying lengths within the array...

    > Implementation Details:
        -> Simple counter-based approach with no additional data structures required...
        -> Leverages Java's string methods for prefix and suffix validation...
        -> Demonstrates the solution with an example array containing ["a", "aba", "ababa", "aa"]...
        -> The inner loop starts from i+1 to ensure pairs are only counted once...
        -> Output shows the total count of valid prefix and suffix pairs...

    > Time and Space Complexity:
        -> Time Complexity: O(nÂ² * m) where n is the number of strings and m is the average string length...
        -> Space Complexity: O(1) as we only use a constant amount of extra space...
        -> The startsWith() and endsWith() methods each have a time complexity of O(m)...
   
*/

public class Count_Prefix_And_Suffix_Pairs {

    private static int countPairs(String[] words) {

        int count = 0;
        int n = words.length;

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {

                if (words[j].startsWith(words[i]) && words[j].endsWith(words[i])) {
                    count++;
                }

            }
        }

        return count;

    }

    public static void main(String[] args) {

        String[] words = {"a", "aba", "ababa", "aa"};
        System.out.println("The number of prefix and suffix pairs are : " + countPairs(words));

    }

}
